Related reference material(All Web Elements):

a
defines an anchor (or hyperlink)
abbr
defines an abbreviated form of a longer word or phrase
acronym
an abbreviation comprising the initial letters of a given phrase
address
identifies an administrator or owner of a document
applet
inserts a Java applet (mini application) into the document
area
defines a hotspot within a client-side image map
b
sets enclosed text to bold type
base
specifies a base URL for all relative URLs contained in the document
basefont
sets a basic font size for normal browser text
bdo
overrides the current text direction
bgsound
Plays a background sound on page load
big
increases the font size of text
blink
blinks text on-off
blockquote
used to indicate a block of quoted text, with an attribution that identifies who said or wrote it
body
contains all the content to be displayed to user
br
creates a single line break in a block of text
button
groups a selection of elements together into a clickable form element
caption
provides a visual caption (a title or description) for the table
center
centers all the enclosed content
cite
identifies a reference to a written work, play, book, or magazine
code
identifies text as computer or machine-readable code
col
defines a column within a table
colgroup
defines a group of columns within a table
comment
inserts a comment into markup
dd
describes a term in a definition list
del
identifies deleted content
dfn
identifies the defining instance of a term
dir
used to define a multicolumn directory listing
div
divides a page into separate sections
dl
creates a definition list for lists comprising item: description pairings
dt
defines a definition term used in a definition list
em
signifies emphasized content
embed
provides a generic (non-standard) container for a media object
fieldset
groups related form controls
font
the (out-of-favor) font styling element
form
defines a form that includes a range of inputs and controls
frame
defines a window region, part of a collection of frames in a frameset
frameset
defines a collection of window regions (frames)
h1
defines a level 1 heading
h2
defines a level 2 heading
h3
defines a level 3 heading
h4
defines a level 4 heading
h5
defines a level 5 heading
h6
defines a level 6 heading
head
identifies the head section of document
hr
creates a horizontal rule that might be used to delineate areas of content in a document
html
identifies the content of the document as HTML
i
sets the enclosed text to italic type
iframe
A ‘floating’ frame that can be embedded on a page
img
specifies an inline image element
input
defines the input control for a form
ins
identifies inserted content
isindex
indicates that the document has an associated keyword index that can be searched
kbd
identifies a typed entry on a keyboard
label
specifies descriptive text for the associated form control
legend
defines caption text for form controls that are grouped by the fieldset element
li
indicates an individual item in a list
link
defines the relationship between the current document and other documents or resources
map
defines a client-side image map
marquee
scrolling text area
menu
used to define a list of menu choices
meta
provides general information about a document for indexing and other purposes
nobr
tells browser not to break/wrap contained text
noembed
specifies alternative content for browsers that don’t support embed
noframes
provides alternative content for frameset-based content
noscript
provides alternative content for use when scripts aren’t supported or are switched off
object
specifies a generic, multipurpose container for a media object
ol
an ordered list of items/text
optgroup
groups related option elements contained in a select list
option
defines an item in a select list
p
indicates a paragraph of text
param
specifies parameter information to be passed to an object or applet
plaintext
tells browser to treat all following text as plain text
pre
defines preformatted text in which whitespace and line breaks are preserved
q
defines an inline quotation
rb
specifies ruby base text
rbc
defines the ruby base container for complex ruby markup
rp
specifies ruby parentheses
rt
defines ruby text annotation
rtc
defines a ruby text container for complex ruby markup
ruby
provides a mechanism for annotating foreign characters
s
renders text with a horizontal strike (line) through the middle
samp
defines a sample of the characters to be output
script
contains (or refers to) statements in a scripting language that are to be processed on the client side
select
defines a selection list (for single or multiple selections)
small
sets a reduced font size for the enclosed text
span
creates a generic inline container
strike
renders text with a horizontal strike (line) through the middle
strong
signifies strongly emphasized content
style
contains CSS style information that’s embedded into a page
sub
specifies subscript text
sup
specifies superscript text
table
defines a block of tabular data
tbody
logically groups elements that make the body of a table’s content
td
defines a standard data cell in a table
textarea
creates a multiline text input field
tfoot
logically groups elements that comprise the footer area of a table’s content
th
defines a header cell in a table
thead
logically groups header elements in a table
title
defines the title of the web page or document
tr
defines a row in a table
tt
specified text to be formatted in monospace, or fixed-width font
u
underlines enclosed text
ul
an unordered list of items or text
var
defines a variable part of a phrase or example
wbr
suggests where in a word a break should occur
xmp
example text
//---------------------------------------------------------------

(1). Below there is al list of all events available for
 the HTML 4.01 and XHTML 1.0 standards:

(onload, onunload, onclick, ondblclick, onmousedown, onmouseup, onmouseover,
onmousemove, onmouseout, onfocus, onblur, onkeypress, onkeydown, onkeyup, onsubmit,
onreset, onselect, onchange)

//----------------------------------------------------------------





///================================================================

I assume you are trying to do the following:

You have a file containing a java class which you want to run using JUnitCore.

To acomplish this you will have to:

Load the class, this can be done by using a custom class loader. A better approach would be to just include the class into your application
Now you can invoke JUnitCore.runClasses(loadedClass);
Code sample:

File file = new File("path to your file");
File dir = file.getParentFile();
URL url = new URL("file://" + dir.getAbsolutePath());
URLClassLoader classLoader = new URLClassLoader(new URL[]{url});
Class<?> clazz = classLoader.findClass("ClassName");
JUnitCore.runClasses(clazz);

The example will only work if the class does not have a package. You can write
an own class loader to control the class loading process.
See the javadoc for URLClassLoader to learn how this class loader works.
For writing a custom class loader you could consult this.

//==========================================================================

I have a Main.java and Test.java classes that I want to compile and run Main.java in Test.java code. Here is my code

    Process pro1 = Runtime.getRuntime().exec("javac Main.java");
    pro1.waitFor();
    Process pro2 = Runtime.getRuntime().exec("java Main");

    BufferedReader in = new BufferedReader(new InputStreamReader(pro2.getInputStream()));
    String line = null;

    while ((line = in.readLine()) != null) {
        System.out.println(line);



I have modified the code to include some checks:


public class Laj {

  private static void printLines(String name, InputStream ins) throws Exception {
    String line = null;
    BufferedReader in = new BufferedReader(
        new InputStreamReader(ins));
    while ((line = in.readLine()) != null) {
        System.out.println(name + " " + line);
    }
  }

  private static void runProcess(String command) throws Exception {
    Process pro = Runtime.getRuntime().exec(command);
    printLines(command + " stdout:", pro.getInputStream());
    printLines(command + " stderr:", pro.getErrorStream());
    pro.waitFor();
    System.out.println(command + " exitValue() " + pro.exitValue());
  }



  public static void main(String[] args) {
    try {
      runProcess("javac Main.java");
      runProcess("java Main");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
Here is the Main.java:

public class Main {
  public static void main(String[] args) {
    System.out.println("ok");
  }
}
When everything is fine, it just works:

alqualos@ubuntu:~/tmp$ java Laj
javac Main.java exitValue() 0
java Main stdout: ok
java Main exitValue() 0
Now, for example, if I have some error in Main.java:

alqualos@ubuntu:~/tmp$ java Laj
javac Main.java stderr: Main.java:3: package Systems does not exist
javac Main.java stderr:     Systems.out.println("ok");
javac Main.java stderr:            ^
javac Main.java stderr: 1 error
javac Main.java exitValue() 1
java Main stdout: ok
java Main exitValue() 0
It still prints "ok" because the previously compiled Main.class is still there,
 but at least you can see what exactly is happening when your processes are running.
    }

//===========================================================================